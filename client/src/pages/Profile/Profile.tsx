import Typography from '@mui/material/Typography';
import Grid from '@mui/material/Grid';
import Stack from '@mui/material/Stack';
import Card from '@mui/material/Card';
import TextField from '@mui/material/TextField';
import MenuItem from '@mui/material/MenuItem';
import Divider from '@mui/material/Divider';
import Button from '@mui/material/Button';
import Avatar from '@mui/material/Avatar';
import Switch from '@mui/material/Switch';
import TableCell from '@mui/material/TableCell';
import TableRow from '@mui/material/TableRow';
import DataTable from '../../components/dataTable';

import AddIcon from '@mui/icons-material/Add';
import ModeEditOutlineOutlinedIcon from '@mui/icons-material/ModeEditOutlineOutlined';
import PersonOffOutlinedIcon from '@mui/icons-material/PersonOffOutlined';

import IconButton from '@mui/material/IconButton';
import Tooltip from '@mui/material/Tooltip';

import EditIcon from '@mui/icons-material/Edit';
import AccountBoxOutlinedIcon from '@mui/icons-material/AccountBoxOutlined';
import ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';

import CardHeader from '../../components/cardHeader';
import toUserDocs from '../../_mocks/toUserDocs';
import userCars from '../../_mocks/cars';
import { useAppDispatch, useAppSelector } from '../../redux/hooks';
import {
  fetchCars,
  fetchCarsDel,
  fetchDocTD,
  fetchDocTO,
  fetchLkUsers,
  fetchUpdatUser,
} from '../../redux/lk/lkThunkActions';
import { useEffect, useState } from 'react';
import TestDrive from '../../components/testDrive';
import BasicModal from '../../components/BasicModal/BasicModal';
import EditTOForm from './EditTOForm';
import EditTDForm from './EditTDForm';
import EditCarsForm from './EditCarsForm';

const getHeadCellsTO = [
  {
    id: 'id',
    numeric: false,
    disablePadding: false,
    label: 'Id',
  },
  {
    id: 'date',
    numeric: false,
    disablePadding: false,
    label: '–î–∞—Ç–∞',
  },
  {
    id: 'carId',
    numeric: false,
    disablePadding: false,
    label: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å',
  },
  {
    id: 'userScore',
    numeric: false,
    disablePadding: false,
    label: '–û—Ü–µ–Ω–∫–∞',
  },
  {
    id: 'userComment',
    numeric: false,
    disablePadding: false,
    label: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
  },
];

const getHeadCellsUserAuto = [
  {
    id: 'id',
    numeric: false,
    disablePadding: false,
    label: 'Id',
  },
  {
    id: 'mark',
    numeric: false,
    disablePadding: false,
    label: '–ú–∞—Ä–∫–∞',
  },
  {
    id: 'model',
    numeric: false,
    disablePadding: false,
    label: '–ú–æ–¥–µ–ª—å',
  },
  {
    id: 'color',
    numeric: false,
    disablePadding: false,
    label: '–¶–≤–µ—Ç',
  },
  {
    id: 'prodYear',
    numeric: false,
    disablePadding: false,
    label: '–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞',
  },
  {
    id: 'gosNum',
    numeric: false,
    disablePadding: false,
    label: '–ì–æ—Å–Ω–æ–º–µ—Ä',
  },
  {
    id: 'gear',
    numeric: false,
    disablePadding: false,
    label: '–ö–æ—Ä–æ–±–∫–∞',
  },
  {
    id: 'engine',
    numeric: false,
    disablePadding: false,
    label: '–î–≤–∏–≥–∞—Ç–µ–ª—å',
  },
  {
    id: 'vin',
    numeric: false,
    disablePadding: false,
    label: 'VIN',
  },
];

export default function Account() {
  return (
    <Stack spacing={6} sx={{ marginTop: 4 }}>
      <GeneralSettingsSection />
      <UserDocsToTable />
      <UserDocsTestDriveTable />
      <UserAutoTable />
      <TestDrive/>
    </Stack>
  );
}

function GeneralSettingsSection() {

  const isLoading = useAppSelector((store) => store.lkSlice.isLoading);

  const user = useAppSelector((store) => store.lkSlice.user);
  const dispatch = useAppDispatch();
  
  const [inputsName, setInputsName] = useState<string>(user?.name || '–í–≤–µ–¥–∏—Ç–µ –∏–º—è');
  const [inputsPhone, setInputsPhone] = useState<string>(user?.phone || '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω');


  useEffect(() => {
    void dispatch(fetchLkUsers());
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  
  useEffect(() => {
    if(user?.name !== inputsName || user?.phone !== inputsPhone){
      setInputsName(user?.name || '–í–≤–µ–¥–∏—Ç–µ –∏–º—è')
      setInputsPhone(user?.phone || '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω')
    }
  }, [user])
  console.log('userUpdate LK', user);


  const handleTitleChange1 = (event: React.ChangeEvent<HTMLInputElement>): void => {
    setInputsName(event.target.value);
  };
  const handleTitleChange2 = (event: React.ChangeEvent<HTMLInputElement>): void => {
    setInputsPhone(event.target.value);
  };

  const handleSaveUser = async (): Promise<void> => {
    void dispatch(fetchUpdatUser({ inputsName, inputsPhone }));
  };
  if (!isLoading) {
    return (
      <Card type="section">
        <CardHeader title="–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å" />
        <Stack spacing={6}>
          <form onSubmit={() => {}}>
            <Grid container rowSpacing={2} columnSpacing={4}>
              <Grid item xs={12} sm={6} md={6}>
                <TextField
                  label="–§–ò–û"
                  variant="outlined"
                  value={inputsName}
                  fullWidth
                  onChange={handleTitleChange1}
                />
              </Grid>
              <Grid item xs={12} sm={6} md={6}>
                <TextField
                  type="Phone"
                  label="Phone"
                  variant="outlined"
                  value={inputsPhone}
                  fullWidth
                  onChange={handleTitleChange2}
                />
              </Grid>

              <Grid item xs={12} sm={12} md={12}>
                <Button
                  onClick={() => handleSaveUser()}
                  disableElevation
                  variant="contained"
                  endIcon={<EditIcon />}
                  sx={{
                    float: 'right',
                  }}
                >
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </Button>
              </Grid>
            </Grid>
          </form>
        </Stack>
      </Card>
    );
  }
}


function UserDocsToTable({ name, props }) {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentData, setCurrentData] = useState(null);

  const docsTO = useAppSelector((store) => store.lkSlice.docsTO);
  // console.log('docsTO LK USer', docsTO);

  const dispatch = useAppDispatch();

  useEffect(() => {
    void dispatch(fetchDocTO());
  }, []);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const handleEditClick = (row) => {
      setCurrentData(row); // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      setIsModalOpen(true); // –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    };


      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const updateAndClose = () => {
    dispatch(fetchDocTO()); // –ü–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –æ–±–Ω–æ–≤–ª—è—è —Å–ø–∏—Å–æ–∫
    setIsModalOpen(false);
  };

  return (
    <>
    <Card component="section" type="section">
      <CardHeader title="–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ" subtitle=""></CardHeader>
      <DataTable
        {...props}
        headCells={getHeadCellsTO}
        rows={docsTO}
        emptyRowsHeight={{ default: 66.8, dense: 46.8 }}
        render={(row) => (
          <TableRow hover tabIndex={-1} key={row.id}>
            <TableCell>{row.id}</TableCell>
            <TableCell align="left">{row.dateNow}</TableCell>
            <TableCell align="left">{row?.car_id}</TableCell>
            <TableCell align="left">{row?.userScore}</TableCell>
            <TableCell align="left">{row?.userComment}</TableCell>
            {/* <TableCell align="right">${row.salary.toLocaleString()}</TableCell> */}
            <TableCell align="right">
              <Tooltip title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" arrow>
                <IconButton
                  aria-label="edit"
                  color="warning"
                  size="small"
                  sx={{ fontSize: 2 }}
                  onClick={(e) => {
                    e.stopPropagation();
                    handleEditClick(row); //–ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é
                    // console.log('üöÄ ~ LK docsTO row:', row);
                  }}
                >
                  <ModeEditOutlineOutlinedIcon fontSize="medium" />
                </IconButton>
              </Tooltip>
            </TableCell>
          </TableRow>
        )}
      />
    </Card>

    {isModalOpen && (
      <BasicModal
      isOpen={isModalOpen}
      onClose={() => setIsModalOpen(false)}
      data={currentData}
      updateAndClose={updateAndClose}
      FormComponent={EditTOForm}
      />
    )}
    </>
  );
}

function UserDocsTestDriveTable({ name, props }) {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentData, setCurrentData] = useState(null);

  const docsTD = useAppSelector((store) => store.lkSlice.docsTD);
  // console.log('docsTD LK USer', docsTD);

  const dispatch = useAppDispatch();

  useEffect(() => {
    void dispatch(fetchDocTD());
  }, []);

     // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     const handleEditClick = (row) => {
      setCurrentData(row); // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      setIsModalOpen(true); // –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    };

         // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const updateAndClose = () => {
    dispatch(fetchDocTO()); // –ü–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –æ–±–Ω–æ–≤–ª—è—è —Å–ø–∏—Å–æ–∫
    setIsModalOpen(false);
  };

  return (
    <>
    <Card component="section" type="section">
      <CardHeader title="–¢–µ—Å—Ç–¥—Ä–∞–π–≤" subtitle=""></CardHeader>
      <DataTable
        {...props}
        headCells={getHeadCellsTO}
        rows={docsTD}
        emptyRowsHeight={{ default: 66.8, dense: 46.8 }}
        render={(row) => (
          <TableRow hover tabIndex={-1} key={row.id}>
            <TableCell>{row.id}</TableCell>
            <TableCell align="left">{row.dateNow}</TableCell>
            <TableCell align="left">{row?.car_id}</TableCell>
            <TableCell align="left">{row?.userScore}</TableCell>
            <TableCell align="left">{row?.userComment}</TableCell>
            {/* <TableCell align="right">${row.salary.toLocaleString()}</TableCell> */}
            <TableCell align="right">
              <Tooltip title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" arrow>
                <IconButton
                  aria-label="edit"
                  color="warning"
                  size="small"
                  sx={{ fontSize: 2 }}
                  onClick={(e) => {
                    e.stopPropagation();
                    handleEditClick(row);
                    console.log('üöÄ ~ LK docsTD row:', row)
                  }}
                >
                  <ModeEditOutlineOutlinedIcon fontSize="medium" />
                </IconButton>
              </Tooltip>
            </TableCell>
          </TableRow>
        )}
      />
    </Card>
       {isModalOpen && (
        <BasicModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        data={currentData}
        updateAndClose={updateAndClose}
        FormComponent={EditTDForm}
        />
      )}
      </>
  );
}

function UserAutoTable({ name, props }) {

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentData, setCurrentData] = useState(null);

  const myCars = useAppSelector((store) => store.lkSlice.cars);
  // console.log('getMyCars LK', myCars);
  const dispatch = useAppDispatch();

  useEffect(() => {
    void dispatch(fetchCars());
  }, []);

   // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
   const handleEditClick = (row) => {
    setCurrentData(row); // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    setIsModalOpen(true); // –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  };

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const updateAndClose = () => {
          dispatch(fetchDocTO()); // –ü–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –æ–±–Ω–æ–≤–ª—è—è —Å–ø–∏—Å–æ–∫
          setIsModalOpen(false);
        };

        const delHandler = async (carId) : Promise<void> => {
          await dispatch(fetchCarsDel(carId));
          dispatch(fetchCars())
        }

  return (
    <>
    <Card component="section" type="section">
      <CardHeader title="–ú–æ–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏" subtitle=""></CardHeader>
      <DataTable
        {...props}
        headCells={getHeadCellsUserAuto}
        rows={myCars}
        emptyRowsHeight={{ default: 66.8, dense: 46.8 }}
        render={(row) => (
          <TableRow hover tabIndex={-1} key={row.id}>
            <TableCell>{row.id}</TableCell>
            <TableCell align="left">{row.mark}</TableCell>
            <TableCell align="left">{row?.model}</TableCell>
            <TableCell align="left">{row?.color}</TableCell>
            <TableCell align="left">{row?.prodYear}</TableCell>
            <TableCell align="left">{row.gosNum}</TableCell>
            <TableCell align="left">{row?.gear}</TableCell>
            <TableCell align="left">{row?.engine}</TableCell>
            <TableCell align="left">{row?.vin}</TableCell>
            {/* <TableCell align="right">${row.salary.toLocaleString()}</TableCell> */}
            <TableCell align="right">
              <Tooltip title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" arrow>
                <IconButton
                  aria-label="edit"
                  color="warning"
                  size="small"
                  sx={{ fontSize: 2 }}
                  onClick={(e) => {
                    e.stopPropagation();
                    handleEditClick(row); //–ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é
                  }}
                >
                  <ModeEditOutlineOutlinedIcon fontSize="medium" />
                </IconButton>
              </Tooltip>

              <Tooltip title="–£–¥–∞–ª–∏—Ç—å" arrow>
                <IconButton
                  aria-label="edit"
                  color="error"
                  size="small"
                  sx={{ fontSize: 2 }}
                  onClick={(e) => {
                    e.stopPropagation();
                    delHandler(row.id);
                  }}
                >
                  <PersonOffOutlinedIcon fontSize="medium" />
                </IconButton>
              </Tooltip>
            </TableCell>
          </TableRow>
        )}
      />
    </Card>
       {isModalOpen && (
        <BasicModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        data={currentData}
        updateAndClose={updateAndClose}
        FormComponent={EditCarsForm}
        />
      )}
      </>
  );
}

